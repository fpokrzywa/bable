{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI({apiKey: 'AIzaSyAytIneVxy8TLyFcFd0pZdnz8P5lV9iMNc'})],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YAAC,QAAQ;QAAyC;KAAG;IACxE,OAAO;AACT","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/ai/flows/generate-widget-from-query.ts"],"sourcesContent":["// This file is machine-generated - edit at your own risk.\r\n\r\n'use server';\r\n\r\n/**\r\n * @fileOverview This file defines a Genkit flow that generates a widget based on a user query. It takes a query as input and returns a JSON object representing the widget data.\r\n *\r\n * @function generateWidgetFromQuery - The main function that takes a user query and returns widget data.\r\n * @interface GenerateWidgetFromQueryInput - The input type for the generateWidgetFromQuery function.\r\n * @interface GenerateWidgetFromQueryOutput - The output type for the generateWidgetFromQuery function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\nimport axios from 'axios';\r\n\r\nconst GenerateWidgetFromQueryInputSchema = z.object({\r\n  query: z.string().describe('The user query to generate the widget.'),\r\n  workspaceData: z.array(z.any()).optional().describe('Data from all open workspaces to provide context.'),\r\n});\r\nexport type GenerateWidgetFromQueryInput = z.infer<typeof GenerateWidgetFromQueryInputSchema>;\r\n\r\nconst GenerateWidgetFromQueryOutputSchema = z.object({\r\n  answer: z.string().describe('A natural language answer to the user query.'),\r\n  workspace_to_load: z.string().optional().describe('If the user wants to open a workspace, this is the name of the workspace to load.'),\r\n});\r\nexport type GenerateWidgetFromQueryOutput = z.infer<typeof GenerateWidgetFromQueryOutputSchema>;\r\n\r\nexport async function generateWidgetFromQuery(input: GenerateWidgetFromQueryInput): Promise<GenerateWidgetFromQueryOutput> {\r\n  return generateWidgetFromQueryFlow(input);\r\n}\r\n\r\nconst generateWidgetFromQueryFlow = ai.defineFlow(\r\n  {\r\n    name: 'generateWidgetFromQueryFlow',\r\n    inputSchema: GenerateWidgetFromQueryInputSchema,\r\n    outputSchema: GenerateWidgetFromQueryOutputSchema,\r\n  },\r\n  async (input) => {\r\n    const webhookUrl = process.env.APP_LLM_WEBHOOK_URL;\r\n    const llmConfig = process.env.APP_LLM_CONFIG;\r\n\r\n    if (!webhookUrl) {\r\n      throw new Error('APP_LLM_WEBHOOK_URL is not configured in the .env file.');\r\n    }\r\n\r\n    try {\r\n      const fullInput = {\r\n        query: input.query,\r\n        context: input.workspaceData,\r\n      };\r\n\r\n      const payload = {\r\n        input: fullInput,\r\n      };\r\n\r\n      // Use POST to send data in the body, avoiding URL length limits.\r\n      const response = await axios.post(webhookUrl, payload, {\r\n        params: {\r\n          llm: llmConfig?.toLowerCase(),\r\n        },\r\n      });\r\n\r\n      if (response.status === 200 && response.data) {\r\n        let responseData = response.data;\r\n        // Handle if response is an array\r\n        if (Array.isArray(responseData) && responseData.length > 0) {\r\n          responseData = responseData[0];\r\n        }\r\n\r\n        if (typeof responseData === 'object' && responseData !== null) {\r\n          return {\r\n            answer: responseData.answer || responseData.output || \"I received a response, but it was empty.\",\r\n            workspace_to_load: responseData.workspace_to_load\r\n          };\r\n        }\r\n        \r\n        // Handle plain string response for backward compatibility\r\n        return {\r\n          answer: responseData,\r\n        };\r\n      } else {\r\n        return { answer: `The webhook responded with status: ${response.status}` };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error calling LLM webhook:', error);\r\n      let errorMessage = 'An error occurred while contacting the LLM webhook.';\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        errorMessage = `Webhook error: ${error.response.status} - ${error.response.statusText}`;\r\n      } else if (axios.isAxiosError(error)) {\r\n        errorMessage = `Webhook request failed: ${error.message}`;\r\n      }\r\n      return { answer: errorMessage };\r\n    }\r\n  }\r\n);\r\n"],"names":[],"mappings":"AAAA,0DAA0D;;;;;;AAI1D;;;;;;CAMC,GAED;AACA;AAAA;AACA;;;;;;;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,eAAe,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,GAAG,IAAI,QAAQ,GAAG,QAAQ,CAAC;AACtD;AAGA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACpD;AAGO,eAAe,wBAAwB,KAAmC;IAC/E,OAAO,4BAA4B;AACrC;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,aAAa,QAAQ,GAAG,CAAC,mBAAmB;IAClD,MAAM,YAAY,QAAQ,GAAG,CAAC,cAAc;IAE5C,IAAI,CAAC,YAAY;QACf,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;QACF,MAAM,YAAY;YAChB,OAAO,MAAM,KAAK;YAClB,SAAS,MAAM,aAAa;QAC9B;QAEA,MAAM,UAAU;YACd,OAAO;QACT;QAEA,iEAAiE;QACjE,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,YAAY,SAAS;YACrD,QAAQ;gBACN,KAAK,WAAW;YAClB;QACF;QAEA,IAAI,SAAS,MAAM,KAAK,OAAO,SAAS,IAAI,EAAE;YAC5C,IAAI,eAAe,SAAS,IAAI;YAChC,iCAAiC;YACjC,IAAI,MAAM,OAAO,CAAC,iBAAiB,aAAa,MAAM,GAAG,GAAG;gBAC1D,eAAe,YAAY,CAAC,EAAE;YAChC;YAEA,IAAI,OAAO,iBAAiB,YAAY,iBAAiB,MAAM;gBAC7D,OAAO;oBACL,QAAQ,aAAa,MAAM,IAAI,aAAa,MAAM,IAAI;oBACtD,mBAAmB,aAAa,iBAAiB;gBACnD;YACF;YAEA,0DAA0D;YAC1D,OAAO;gBACL,QAAQ;YACV;QACF,OAAO;YACL,OAAO;gBAAE,QAAQ,CAAC,mCAAmC,EAAE,SAAS,MAAM,EAAE;YAAC;QAC3E;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,IAAI,eAAe;QACnB,IAAI,qIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,UAAU,MAAM,QAAQ,EAAE;YAC/C,eAAe,CAAC,eAAe,EAAE,MAAM,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,QAAQ,CAAC,UAAU,EAAE;QACzF,OAAO,IAAI,qIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;YACpC,eAAe,CAAC,wBAAwB,EAAE,MAAM,OAAO,EAAE;QAC3D;QACA,OAAO;YAAE,QAAQ;QAAa;IAChC;AACF;;;IAlEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/ai/flows/agent-specific-widget.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview Dynamically assigns a ServiceNow agent to each widget based on its data.\r\n *\r\n * - agentSpecificWidget - A function that handles the agent assignment process.\r\n * - AgentSpecificWidgetInput - The input type for the agentSpecificWidget function.\r\n * - AgentSpecificWidgetOutput - The return type for the agentSpecificWidget function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst AgentSpecificWidgetInputSchema = z.object({\r\n  widgetData: z.string().describe('The data associated with the widget.'),\r\n});\r\nexport type AgentSpecificWidgetInput = z.infer<typeof AgentSpecificWidgetInputSchema>;\r\n\r\nconst AgentSpecificWidgetOutputSchema = z.object({\r\n  agentType: z.string().describe('The type of ServiceNow agent assigned to the widget (e.g., incident agent, change agent).'),\r\n  agentBehavior: z.string().describe('The specific behavior of the agent within the widget.'),\r\n});\r\nexport type AgentSpecificWidgetOutput = z.infer<typeof AgentSpecificWidgetOutputSchema>;\r\n\r\nexport async function agentSpecificWidget(input: AgentSpecificWidgetInput): Promise<AgentSpecificWidgetOutput> {\r\n  return agentSpecificWidgetFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'agentSpecificWidgetPrompt',\r\n  input: {schema: AgentSpecificWidgetInputSchema},\r\n  output: {schema: AgentSpecificWidgetOutputSchema},\r\n  prompt: `Based on the following widget data, determine the most appropriate ServiceNow agent type and its corresponding behavior within the widget.\\n\\nWidget Data: {{{widgetData}}}\\n\\nConsider agent types like incident agent, change agent, problem agent, etc.\\nSpecify the agentType and a brief description of the agentBehavior applicable to this widget.`,\r\n});\r\n\r\nconst agentSpecificWidgetFlow = ai.defineFlow(\r\n  {\r\n    name: 'agentSpecificWidgetFlow',\r\n    inputSchema: AgentSpecificWidgetInputSchema,\r\n    outputSchema: AgentSpecificWidgetOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACrC;AAGO,eAAe,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC,yVAAyV,CAAC;AACrW;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IApBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 406, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/ai/flows/save-query-with-voice-text.ts"],"sourcesContent":["'use server';\r\n/**\r\n * @fileOverview A flow to save common queries or widget configurations using voice or text commands.\r\n *\r\n * - saveQueryWithVoiceText - A function that handles saving the query with voice or text.\r\n * - SaveQueryWithVoiceTextInput - The input type for the saveQueryWithVoiceText function.\r\n * - SaveQueryWithVoiceTextOutput - The return type for the saveQueryWithVoiceText function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst SaveQueryWithVoiceTextInputSchema = z.object({\r\n  queryName: z.string().describe('The name of the query to be saved.'),\r\n  queryText: z.string().describe('The text of the query to be saved.'),\r\n});\r\nexport type SaveQueryWithVoiceTextInput = z.infer<typeof SaveQueryWithVoiceTextInputSchema>;\r\n\r\nconst SaveQueryWithVoiceTextOutputSchema = z.object({\r\n  success: z.boolean().describe('Whether the query was successfully saved.'),\r\n  message: z.string().describe('A message indicating the result of the save operation.'),\r\n});\r\nexport type SaveQueryWithVoiceTextOutput = z.infer<typeof SaveQueryWithVoiceTextOutputSchema>;\r\n\r\nexport async function saveQueryWithVoiceText(input: SaveQueryWithVoiceTextInput): Promise<SaveQueryWithVoiceTextOutput> {\r\n  return saveQueryWithVoiceTextFlow(input);\r\n}\r\n\r\nconst saveQueryWithVoiceTextPrompt = ai.definePrompt({\r\n  name: 'saveQueryWithVoiceTextPrompt',\r\n  input: {schema: SaveQueryWithVoiceTextInputSchema},\r\n  output: {schema: SaveQueryWithVoiceTextOutputSchema},\r\n  prompt: `You are a ServiceNow assistant helping users save their queries.\r\n  The user wants to save the following query with the given name.\r\n  If the query name is valid, save the query and return success as true.  Otherwise return false.\r\n\r\n  Query Name: {{{queryName}}}\r\n  Query Text: {{{queryText}}}\r\n  `,\r\n});\r\n\r\nconst saveQueryWithVoiceTextFlow = ai.defineFlow(\r\n  {\r\n    name: 'saveQueryWithVoiceTextFlow',\r\n    inputSchema: SaveQueryWithVoiceTextInputSchema,\r\n    outputSchema: SaveQueryWithVoiceTextOutputSchema,\r\n  },\r\n  async input => {\r\n    // TODO: Implement the logic to save the query.\r\n    // This is a placeholder implementation.\r\n    const {output} = await saveQueryWithVoiceTextPrompt(input);\r\n    return {\r\n      success: true,\r\n      message: `Query \"${input.queryName}\" saved successfully.`, \r\n    };\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGO,eAAe,uBAAuB,KAAkC;IAC7E,OAAO,2BAA2B;AACpC;AAEA,MAAM,+BAA+B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACnD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAiC;IACjD,QAAQ;QAAC,QAAQ;IAAkC;IACnD,QAAQ,CAAC;;;;;;EAMT,CAAC;AACH;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,+CAA+C;IAC/C,wCAAwC;IACxC,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,6BAA6B;IACpD,OAAO;QACL,SAAS;QACT,SAAS,CAAC,OAAO,EAAE,MAAM,SAAS,CAAC,qBAAqB,CAAC;IAC3D;AACF;;;IA/BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 476, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/ai/flows/generate-overview-summary.ts"],"sourcesContent":["'use server';\r\n/**\r\n * @fileOverview A flow to generate a summary from all open widgets.\r\n *\r\n * - generateOverviewSummary - A function that handles generating the summary.\r\n * - GenerateOverviewSummaryInput - The input type for the generateOverviewSummary function.\r\n * - GenerateOverviewSummaryOutput - The return type for the generateOverviewSummary function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst GenerateOverviewSummaryInputSchema = z.object({\r\n  widgetData: z.array(z.any()).describe('The data from all open widgets.'),\r\n});\r\nexport type GenerateOverviewSummaryInput = z.infer<typeof GenerateOverviewSummaryInputSchema>;\r\n\r\nconst GenerateOverviewSummaryOutputSchema = z.object({\r\n  summary: z.string().describe('The generated summary of all widget data.'),\r\n});\r\nexport type GenerateOverviewSummaryOutput = z.infer<typeof GenerateOverviewSummaryOutputSchema>;\r\n\r\nexport async function generateOverviewSummary(input: GenerateOverviewSummaryInput): Promise<GenerateOverviewSummaryOutput> {\r\n  return generateOverviewSummaryFlow(input);\r\n}\r\n\r\nconst generateOverviewSummaryPrompt = ai.definePrompt({\r\n  name: 'generateOverviewSummaryPrompt',\r\n  input: {schema: GenerateOverviewSummaryInputSchema},\r\n  output: {schema: GenerateOverviewSummaryOutputSchema},\r\n  prompt: `You are a ServiceNow expert. Based on the data from all the open widgets below, provide a concise summary. The data is provided as a JSON object.\r\n\r\n  Widget Data:\r\n  {{{json widgetData}}}\r\n  `,\r\n});\r\n\r\nconst generateOverviewSummaryFlow = ai.defineFlow(\r\n  {\r\n    name: 'generateOverviewSummaryFlow',\r\n    inputSchema: GenerateOverviewSummaryInputSchema,\r\n    outputSchema: GenerateOverviewSummaryOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await generateOverviewSummaryPrompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,YAAY,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,GAAG,IAAI,QAAQ,CAAC;AACxC;AAGA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGO,eAAe,wBAAwB,KAAmC;IAC/E,OAAO,4BAA4B;AACrC;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACpD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAkC;IAClD,QAAQ;QAAC,QAAQ;IAAmC;IACpD,QAAQ,CAAC;;;;EAIT,CAAC;AACH;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,8BAA8B;IACrD,OAAO;AACT;;;IAxBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 537, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/services/servicenow.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport axios from 'axios';\r\nimport type { Incident } from '@/lib/types';\r\n\r\nexport async function getIncidents(serviceNowUrl?: string): Promise<Incident[]> {\r\n  const appClient = 'ai_browser';\r\n  const appSecret = 'Appdev2025!';\r\n  \r\n  // Use provided URL or fallback to hardcoded default\r\n  const baseUrl = serviceNowUrl || 'https://dev309119.service-now.com';\r\n  const requestUrl = `${baseUrl}/api/now/table/incident?sysparm_limit=10`;\r\n\r\n  // Create Basic Auth header\r\n  const auth = Buffer.from(`${appClient}:${appSecret}`).toString('base64');\r\n\r\n  try {\r\n    const response = await axios.get(requestUrl, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': `Basic ${auth}`,\r\n      },\r\n    });\r\n    return response.data.result;\r\n  } catch (error: any) {\r\n    console.error('ServiceNow API Error:', {\r\n      message: error.message,\r\n      status: error.response?.status,\r\n      statusText: error.response?.statusText,\r\n      data: error.response?.data\r\n    });\r\n    \r\n    // More specific error handling\r\n    if (error.response?.status === 401) {\r\n      throw new Error('Authentication failed. Check your ServiceNow credentials.');\r\n    } else if (error.response?.status === 403) {\r\n      throw new Error('Access forbidden. Check user permissions.');\r\n    } else {\r\n      throw new Error(`Failed to fetch data from ServiceNow: ${error.message}`);\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAGO,eAAe,aAAa,aAAsB;IACvD,MAAM,YAAY;IAClB,MAAM,YAAY;IAElB,oDAAoD;IACpD,MAAM,UAAU,iBAAiB;IACjC,MAAM,aAAa,GAAG,QAAQ,wCAAwC,CAAC;IAEvE,2BAA2B;IAC3B,MAAM,OAAO,OAAO,IAAI,CAAC,GAAG,UAAU,CAAC,EAAE,WAAW,EAAE,QAAQ,CAAC;IAE/D,IAAI;QACF,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,YAAY;YAC3C,SAAS;gBACP,gBAAgB;gBAChB,UAAU;gBACV,iBAAiB,CAAC,MAAM,EAAE,MAAM;YAClC;QACF;QACA,OAAO,SAAS,IAAI,CAAC,MAAM;IAC7B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB;YACrC,SAAS,MAAM,OAAO;YACtB,QAAQ,MAAM,QAAQ,EAAE;YACxB,YAAY,MAAM,QAAQ,EAAE;YAC5B,MAAM,MAAM,QAAQ,EAAE;QACxB;QAEA,+BAA+B;QAC/B,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YAClC,MAAM,IAAI,MAAM;QAClB,OAAO,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;YACzC,MAAM,IAAI,MAAM;QAClB,OAAO;YACL,MAAM,IAAI,MAAM,CAAC,sCAAsC,EAAE,MAAM,OAAO,EAAE;QAC1E;IACF;AACF;;;IArCsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 592, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/services/sampleDataService.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport axios from 'axios';\r\nimport type { Incident, Problem, Change } from '@/lib/types';\r\n\r\nconst getWebhookUrl = () => {\r\n    const url = process.env.SAMPLE_RECORD_WEBHOOK_URL;\r\n    if (!url) {\r\n        throw new Error('SAMPLE_RECORD_WEBHOOK_URL is not configured in .env file.');\r\n    }\r\n    return url;\r\n};\r\n\r\ntype DataType = 'incident' | 'problem' | 'change_request';\r\n\r\nexport async function getSampleData(type: DataType, sysId: string = 'all'): Promise<(Incident | Problem | Change)[]> {\r\n    const webhookUrl = getWebhookUrl();\r\n\r\n    try {\r\n        const response = await axios.get(webhookUrl, {\r\n            params: {\r\n                type: type,\r\n                sys_id: sysId,\r\n            },\r\n        });\r\n\r\n        if (response.status === 200 && response.data) {\r\n            return Array.isArray(response.data) ? response.data : [response.data];\r\n        }\r\n\r\n        console.warn(`Webhook for sample data returned status ${response.status} or no data.`);\r\n        return [];\r\n\r\n    } catch (error) {\r\n        if (axios.isAxiosError(error)) {\r\n            console.error(`Failed to get sample data from webhook for type ${type}:`, error.message);\r\n        } else {\r\n            console.error('An unexpected error occurred while fetching sample data:', error);\r\n        }\r\n        throw new Error(`Failed to fetch sample data for type: ${type}`);\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAGA,MAAM,gBAAgB;IAClB,MAAM,MAAM,QAAQ,GAAG,CAAC,yBAAyB;IACjD,IAAI,CAAC,KAAK;QACN,MAAM,IAAI,MAAM;IACpB;IACA,OAAO;AACX;AAIO,eAAe,cAAc,IAAc,EAAE,QAAgB,KAAK;IACrE,MAAM,aAAa;IAEnB,IAAI;QACA,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,YAAY;YACzC,QAAQ;gBACJ,MAAM;gBACN,QAAQ;YACZ;QACJ;QAEA,IAAI,SAAS,MAAM,KAAK,OAAO,SAAS,IAAI,EAAE;YAC1C,OAAO,MAAM,OAAO,CAAC,SAAS,IAAI,IAAI,SAAS,IAAI,GAAG;gBAAC,SAAS,IAAI;aAAC;QACzE;QAEA,QAAQ,IAAI,CAAC,CAAC,wCAAwC,EAAE,SAAS,MAAM,CAAC,YAAY,CAAC;QACrF,OAAO,EAAE;IAEb,EAAE,OAAO,OAAO;QACZ,IAAI,qIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;YAC3B,QAAQ,KAAK,CAAC,CAAC,gDAAgD,EAAE,KAAK,CAAC,CAAC,EAAE,MAAM,OAAO;QAC3F,OAAO;YACH,QAAQ,KAAK,CAAC,4DAA4D;QAC9E;QACA,MAAM,IAAI,MAAM,CAAC,sCAAsC,EAAE,MAAM;IACnE;AACJ;;;IA1BsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 645, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/services/workspaceService.ts"],"sourcesContent":["\r\n\r\n'use server';\r\n\r\nimport axios from 'axios';\r\nimport type { Workspace } from '@/lib/types';\r\n\r\nconst getWorkspaceWebhookUrl = () => {\r\n    const url = process.env.WORKSPACE_WEBHOOK_URL;\r\n    if (!url) {\r\n        throw new Error('WORKSPACE_WEBHOOK_URL is not configured in .env file.');\r\n    }\r\n    return url;\r\n};\r\n\r\nconst getUserWorkspacesWebhookUrl = () => {\r\n    const url = process.env.USER_WORKSPACE_WEBHOOK_URL;\r\n    if (!url) {\r\n        console.warn('USER_WORKSPACE_WEBHOOK_URL is not configured in .env file - workspace sync disabled');\r\n        return null;\r\n    }\r\n    return url;\r\n};\r\n\r\nexport async function getWorkspaces(userId: string): Promise<Workspace[]> {\r\n    try {\r\n        const webhookUrl = getUserWorkspacesWebhookUrl();\r\n        if (!webhookUrl) {\r\n            return []; // Gracefully return empty array if webhook URL is not configured\r\n        }\r\n        const response = await axios.get(webhookUrl, { params: { userId, workspaceId: 'all' } });\r\n        if (response.status === 200 && response.data) {\r\n            return Array.isArray(response.data) ? response.data : [response.data];\r\n        }\r\n        return [];\r\n    } catch (error: any) {\r\n        // Only log detailed errors for non-404 status codes\r\n        if (error?.response?.status !== 404) {\r\n            console.error('Failed to get workspaces:', error);\r\n        } else {\r\n            console.warn('Workspace endpoint not found (404) - using local workspace management');\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport interface WorkspaceChanges {\r\n    added: Workspace[];\r\n    deleted: string[];\r\n    modified: Workspace[];\r\n    hasChanges: boolean;\r\n}\r\n\r\nexport async function detectWorkspaceChanges(userId: string, currentWorkspaces: Workspace[]): Promise<WorkspaceChanges> {\r\n    try {\r\n        const freshWorkspaces = await getWorkspaces(userId);\r\n        \r\n        const currentMap = new Map(currentWorkspaces.map(ws => [ws.workspaceId, ws]));\r\n        const freshMap = new Map(freshWorkspaces.map(ws => [ws.workspaceId, ws]));\r\n        \r\n        const added: Workspace[] = [];\r\n        const modified: Workspace[] = [];\r\n        const deleted: string[] = [];\r\n        \r\n        // Find added and modified workspaces\r\n        for (const [id, freshWs] of freshMap) {\r\n            const currentWs = currentMap.get(id);\r\n            if (!currentWs) {\r\n                added.push(freshWs);\r\n            } else if (JSON.stringify(currentWs) !== JSON.stringify(freshWs)) {\r\n                modified.push(freshWs);\r\n            }\r\n        }\r\n        \r\n        // Find deleted workspaces\r\n        for (const [id] of currentMap) {\r\n            if (!freshMap.has(id)) {\r\n                deleted.push(id);\r\n            }\r\n        }\r\n        \r\n        return {\r\n            added,\r\n            deleted,\r\n            modified,\r\n            hasChanges: added.length > 0 || deleted.length > 0 || modified.length > 0\r\n        };\r\n    } catch (error) {\r\n        console.error('Failed to detect workspace changes:', error);\r\n        return {\r\n            added: [],\r\n            deleted: [],\r\n            modified: [],\r\n            hasChanges: false\r\n        };\r\n    }\r\n}\r\n\r\n\r\nexport async function saveWorkspace(workspaceData: Omit<Workspace, 'workspaceId' | 'active'> & { workspaceId?: string }): Promise<Workspace | null> {\r\n    const webhookUrl = getWorkspaceWebhookUrl();\r\n    const workspaceId = workspaceData.workspaceId || `ws_${Date.now()}`;\r\n    const payload = {\r\n        ...workspaceData,\r\n        workspaceId: workspaceId,\r\n        active: true,\r\n    };\r\n\r\n\r\n    try {\r\n        const response = await axios.post(webhookUrl, payload, { params: { workspaceId } });\r\n        if (response.status === 200 || response.status === 201) {\r\n            // The webhook can return the saved object directly or inside a 'result' property\r\n            return response.data?.result || response.data;\r\n        }\r\n        return null;\r\n    } catch (error: any) {\r\n        if (axios.isAxiosError(error)) {\r\n            // Only log detailed errors for non-404 status codes\r\n            if (error?.response?.status !== 404) {\r\n                console.error('Failed to save workspace:', {\r\n                    message: error.message,\r\n                    status: error.response?.status,\r\n                    data: error.response?.data,\r\n                    url: webhookUrl,\r\n                    sentData: payload\r\n                });\r\n            } else {\r\n                console.warn('Workspace save endpoint not found (404) - workspace not saved to remote');\r\n            }\r\n        } else {\r\n            console.error('An unexpected error occurred during workspace save:', error);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function deleteWorkspace(workspaceId: string): Promise<boolean> {\r\n    const webhookUrl = getWorkspaceWebhookUrl();\r\n    try {\r\n        const response = await axios.delete(webhookUrl, { params: { workspaceId } });\r\n        return response.status === 200 || response.status === 204;\r\n    } catch (error: any) {\r\n        // Only log detailed errors for non-404 status codes\r\n        if (error?.response?.status !== 404) {\r\n            console.error('Failed to delete workspace:', error);\r\n        } else {\r\n            console.warn('Workspace delete endpoint not found (404) - workspace not deleted from remote');\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 821, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/ai/flows/context-aware-widget-chat.ts"],"sourcesContent":["// This file is machine-generated - edit with care!\r\n\r\n'use server';\r\n\r\n/**\r\n * @fileOverview Implements the context-aware chat functionality for widgets.\r\n *\r\n * - contextAwareWidgetChat - A function that suggests relevant data/actions based on the widget's context.\r\n * - ContextAwareWidgetChatInput - The input type for the contextAwareWidgetChat function.\r\n * - ContextAwareWidgetChatOutput - The return type for the contextAwareWidgetChat function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst ChatHistorySchema = z.object({\r\n    role: z.enum(['user', 'model']),\r\n    content: z.string(),\r\n});\r\n\r\nconst ContextAwareWidgetChatInputSchema = z.object({\r\n  widgetType: z.string().describe('The type of widget (e.g., Incident, Change).'),\r\n  widgetData: z.any().describe('The data currently displayed in the widget.'),\r\n  userQuery: z.string().describe('The user input in the chat.'),\r\n  selectedEntityData: z.any().optional().describe('The data for the specific entity the user is asking about.'),\r\n  chatHistory: z.array(ChatHistorySchema).optional().describe('The previous chat history.'),\r\n  isGenericWidget: z.boolean().optional().describe('Flag to indicate if the widget is of generic type.'),\r\n});\r\nexport type ContextAwareWidgetChatInput = z.infer<typeof ContextAwareWidgetChatInputSchema>;\r\n\r\nconst ContextAwareWidgetChatOutputSchema = z.object({\r\n  suggestedActions: z.array(\r\n    z.string().describe('A list of suggested actions based on the widget context.')\r\n  ).\r\n  describe('The suggestions for the user to perform in the widget.')\r\n});\r\nexport type ContextAwareWidgetChatOutput = z.infer<typeof ContextAwareWidgetChatOutputSchema>;\r\n\r\nexport async function contextAwareWidgetChat(input: ContextAwareWidgetChatInput): Promise<ContextAwareWidgetChatOutput> {\r\n  return contextAwareWidgetChatFlow(input);\r\n}\r\n\r\nconst contextAwareWidgetChatPrompt = ai.definePrompt({\r\n  name: 'contextAwareWidgetChatPrompt',\r\n  input: {schema: ContextAwareWidgetChatInputSchema},\r\n  output: {schema: ContextAwareWidgetChatOutputSchema},\r\n  prompt: `You are an AI assistant within a ServiceNow widget.\r\n\r\n  Based on the widget type and its current data, suggest relevant actions or answer questions.\r\n  Consider the user's last query and the chat history to refine your suggestions.\r\n\r\n  Widget Type: {{{widgetType}}}\r\n  {{#if selectedEntityData}}\r\n  The user is specifically asking about the following record (identified by number and sys_id):\r\n  {{{json selectedEntityData}}}\r\n  {{else}}\r\n  Widget Data:\r\n  {{#if isGenericWidget}}\r\n  {{{widgetData}}}\r\n  {{else}}\r\n  {{{json widgetData}}}\r\n  {{/if}}\r\n  {{/if}}\r\n\r\n  {{#if chatHistory}}\r\n  Conversation History:\r\n  {{#each chatHistory}}\r\n  - {{this.role}}: {{this.content}}\r\n  {{/each}}\r\n  {{/if}}\r\n\r\n  User's Latest Query: {{{userQuery}}}\r\n\r\n  If the user asks a question, answer it based on the provided data and chat history. If they ask for an action, suggest relevant actions (e.g., \"search for related knowledge articles\", \"update incident priority\", \"assign to correct group\").\r\n\r\n  Return a JSON array of strings with the suggested actions or answer.\r\n\r\n  Example Output for suggestions:\r\n  {\r\n    \"suggestedActions\": [\r\n      \"Search for related knowledge articles\",\r\n      \"Update incident priority\",\r\n      \"Add a comment to the incident\"\r\n    ]\r\n  }\r\n\r\n\r\n  Example Output for an answer:\r\n  {\r\n    \"suggestedActions\": [\r\n      \"The priority of this incident is 1 - Critical.\"\r\n    ]\r\n  }\r\n  `,\r\n});\r\n\r\nconst contextAwareWidgetChatFlow = ai.defineFlow(\r\n  {\r\n    name: 'contextAwareWidgetChatFlow',\r\n    inputSchema: ContextAwareWidgetChatInputSchema,\r\n    outputSchema: ContextAwareWidgetChatOutputSchema,\r\n  },\r\n  async (input) => {\r\n    const promptInput = {\r\n      ...input,\r\n      isGenericWidget: input.widgetType === 'generic',\r\n    };\r\n    const {output} = await contextAwareWidgetChatPrompt(promptInput);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":"AAAA,mDAAmD;;;;;;AAInD;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/B,MAAM,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAQ;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM;AACrB;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,YAAY,uIAAA,CAAA,IAAC,CAAC,GAAG,GAAG,QAAQ,CAAC;IAC7B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,oBAAoB,uIAAA,CAAA,IAAC,CAAC,GAAG,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAChD,aAAa,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,mBAAmB,QAAQ,GAAG,QAAQ,CAAC;IAC5D,iBAAiB,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACnD;AAGA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,kBAAkB,uIAAA,CAAA,IAAC,CAAC,KAAK,CACvB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,6DAEtB,QAAQ,CAAC;AACX;AAGO,eAAe,uBAAuB,KAAkC;IAC7E,OAAO,2BAA2B;AACpC;AAEA,MAAM,+BAA+B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACnD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAiC;IACjD,QAAQ;QAAC,QAAQ;IAAkC;IACnD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+CT,CAAC;AACH;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,cAAc;QAClB,GAAG,KAAK;QACR,iBAAiB,MAAM,UAAU,KAAK;IACxC;IACA,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,6BAA6B;IACpD,OAAO;AACT;;;IAvEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 942, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/services/assistantService.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport axios from 'axios';\r\nimport type { Assistant } from '@/lib/types';\r\n\r\nconst ASSISTANTS_CACHE_KEY = 'assistantsCache';\r\nlet cache: { timestamp: number; data: Assistant[] } | null = null;\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n\r\nconst getWebhookUrl = () => {\r\n    const url = process.env.GET_OPENAI_ASSISTANTS;\r\n    if (!url) {\r\n        console.warn('GET_OPENAI_ASSISTANTS webhook URL is not configured. Assistant fetching will be skipped.');\r\n        return null;\r\n    }\r\n    return url;\r\n};\r\n\r\nconst getSampleAssistants = (): Assistant[] => [\r\n    {\r\n        id: '1',\r\n        name: 'ODIN (Sample)',\r\n        description: 'You are a helpful assistant named ODIN, you are a meta-agent.... (This is sample data)',\r\n        version: 'gpt-4.1',\r\n        icon: 'bot',\r\n        addedDate: '2023-10-26T10:00:00Z',\r\n    },\r\n    {\r\n        id: '2',\r\n        name: 'Prompt Architect (Sample)',\r\n        description: 'You are a Prompt Architect AI. Your job is to write optimized system prompts...',\r\n        version: 'gpt-4.1',\r\n        icon: 'zap',\r\n        addedDate: '2023-10-25T10:00:00Z',\r\n    },\r\n];\r\n\r\nexport async function getAssistants(forceRefresh = false): Promise<Assistant[]> {\r\n    const now = Date.now();\r\n    if (!forceRefresh && cache && (now - cache.timestamp < CACHE_DURATION)) {\r\n        return cache.data;\r\n    }\r\n\r\n    const webhookUrl = getWebhookUrl();\r\n    const apiKey = process.env.BABLEPHISH_ASSISTANT_API_KEY;\r\n\r\n    if (!webhookUrl) {\r\n        return getSampleAssistants();\r\n    }\r\n    \r\n    if (!apiKey) {\r\n        console.warn('BABLEPHISH_ASSISTANT_API_KEY is not configured. Falling back to sample data.');\r\n        return getSampleAssistants();\r\n    }\r\n\r\n    try {\r\n        const response = await axios.get(webhookUrl, {\r\n            headers: {\r\n                'Authorization': `Bearer ${apiKey}`,\r\n                'OpenAI-Beta': 'assistants=v1'\r\n            },\r\n        });\r\n\r\n        if (response.status === 200 && response.data) {\r\n            // The API can return an object with a 'data' property or a direct array\r\n            const assistantList = Array.isArray(response.data) ? response.data : response.data.data;\r\n\r\n            if (Array.isArray(assistantList)) {\r\n                const assistants = assistantList.map((item: any) => ({\r\n                    id: item.id,\r\n                    name: item.name || 'Unnamed Assistant',\r\n                    description: item.instructions || 'No description provided.',\r\n                    version: item.model || 'N/A',\r\n                    icon: item.tools?.length > 0 ? 'zap' : 'bot',\r\n                    addedDate: item.created_at ? new Date(item.created_at * 1000).toISOString() : new Date().toISOString()\r\n                }));\r\n\r\n                cache = { timestamp: now, data: assistants };\r\n                return assistants;\r\n            }\r\n        }\r\n\r\n        console.warn(`Webhook for assistants returned status ${response.status} or invalid data format.`, response.data);\r\n        return getSampleAssistants();\r\n\r\n    } catch (error) {\r\n        if (axios.isAxiosError(error)) {\r\n            console.error('Failed to get assistants from webhook:', error.message);\r\n        } else {\r\n            console.error('An unexpected error occurred while fetching assistants:', error);\r\n        }\r\n        return getSampleAssistants();\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAGA,MAAM,uBAAuB;AAC7B,IAAI,QAAyD;AAC7D,MAAM,iBAAiB,IAAI,KAAK,MAAM,YAAY;AAElD,MAAM,gBAAgB;IAClB,MAAM,MAAM,QAAQ,GAAG,CAAC,qBAAqB;IAC7C,IAAI,CAAC,KAAK;QACN,QAAQ,IAAI,CAAC;QACb,OAAO;IACX;IACA,OAAO;AACX;AAEA,MAAM,sBAAsB,IAAmB;QAC3C;YACI,IAAI;YACJ,MAAM;YACN,aAAa;YACb,SAAS;YACT,MAAM;YACN,WAAW;QACf;QACA;YACI,IAAI;YACJ,MAAM;YACN,aAAa;YACb,SAAS;YACT,MAAM;YACN,WAAW;QACf;KACH;AAEM,eAAe,cAAc,eAAe,KAAK;IACpD,MAAM,MAAM,KAAK,GAAG;IACpB,IAAI,CAAC,gBAAgB,SAAU,MAAM,MAAM,SAAS,GAAG,gBAAiB;QACpE,OAAO,MAAM,IAAI;IACrB;IAEA,MAAM,aAAa;IACnB,MAAM,SAAS,QAAQ,GAAG,CAAC,4BAA4B;IAEvD,IAAI,CAAC,YAAY;QACb,OAAO;IACX;IAEA,IAAI,CAAC,QAAQ;QACT,QAAQ,IAAI,CAAC;QACb,OAAO;IACX;IAEA,IAAI;QACA,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,YAAY;YACzC,SAAS;gBACL,iBAAiB,CAAC,OAAO,EAAE,QAAQ;gBACnC,eAAe;YACnB;QACJ;QAEA,IAAI,SAAS,MAAM,KAAK,OAAO,SAAS,IAAI,EAAE;YAC1C,wEAAwE;YACxE,MAAM,gBAAgB,MAAM,OAAO,CAAC,SAAS,IAAI,IAAI,SAAS,IAAI,GAAG,SAAS,IAAI,CAAC,IAAI;YAEvF,IAAI,MAAM,OAAO,CAAC,gBAAgB;gBAC9B,MAAM,aAAa,cAAc,GAAG,CAAC,CAAC,OAAc,CAAC;wBACjD,IAAI,KAAK,EAAE;wBACX,MAAM,KAAK,IAAI,IAAI;wBACnB,aAAa,KAAK,YAAY,IAAI;wBAClC,SAAS,KAAK,KAAK,IAAI;wBACvB,MAAM,KAAK,KAAK,EAAE,SAAS,IAAI,QAAQ;wBACvC,WAAW,KAAK,UAAU,GAAG,IAAI,KAAK,KAAK,UAAU,GAAG,MAAM,WAAW,KAAK,IAAI,OAAO,WAAW;oBACxG,CAAC;gBAED,QAAQ;oBAAE,WAAW;oBAAK,MAAM;gBAAW;gBAC3C,OAAO;YACX;QACJ;QAEA,QAAQ,IAAI,CAAC,CAAC,uCAAuC,EAAE,SAAS,MAAM,CAAC,wBAAwB,CAAC,EAAE,SAAS,IAAI;QAC/G,OAAO;IAEX,EAAE,OAAO,OAAO;QACZ,IAAI,qIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;YAC3B,QAAQ,KAAK,CAAC,0CAA0C,MAAM,OAAO;QACzE,OAAO;YACH,QAAQ,KAAK,CAAC,2DAA2D;QAC7E;QACA,OAAO;IACX;AACJ;;;IAxDsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 1043, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/services/promptService.ts"],"sourcesContent":["\r\n'use server';\r\n\r\nimport axios from 'axios';\r\nimport type { Prompt } from '@/lib/types';\r\n\r\nconst getWebhookUrl = () => {\r\n    const url = process.env.GET_PROMPT_WEBHOOK_URL;\r\n    if (!url) {\r\n        console.warn('GET_PROMPT_WEBHOOK_URL is not configured in .env file. Prompt fetching will be skipped.');\r\n        return null;\r\n    }\r\n    return url;\r\n};\r\n\r\nexport async function getPrompts(): Promise<Prompt[]> {\r\n    const webhookUrl = getWebhookUrl();\r\n    if (!webhookUrl) {\r\n        return []; // Return empty array if URL is not set\r\n    }\r\n\r\n    try {\r\n        const response = await axios.get(webhookUrl);\r\n\r\n        if (response.status === 200 && response.data) {\r\n            return Array.isArray(response.data) ? response.data : [response.data];\r\n        }\r\n\r\n        console.warn(`Webhook for prompts returned status ${response.status} or no data.`);\r\n        return [];\r\n\r\n    } catch (error) {\r\n        if (axios.isAxiosError(error)) {\r\n            console.error('Failed to get prompts from webhook:', error.message);\r\n        } else {\r\n            console.error('An unexpected error occurred while fetching prompts:', error);\r\n        }\r\n        // Instead of throwing, return empty array to allow the page to render.\r\n        return [];\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAGA,MAAM,gBAAgB;IAClB,MAAM,MAAM,QAAQ,GAAG,CAAC,sBAAsB;IAC9C,IAAI,CAAC,KAAK;QACN,QAAQ,IAAI,CAAC;QACb,OAAO;IACX;IACA,OAAO;AACX;AAEO,eAAe;IAClB,MAAM,aAAa;IACnB,IAAI,CAAC,YAAY;QACb,OAAO,EAAE,EAAE,uCAAuC;IACtD;IAEA,IAAI;QACA,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC;QAEjC,IAAI,SAAS,MAAM,KAAK,OAAO,SAAS,IAAI,EAAE;YAC1C,OAAO,MAAM,OAAO,CAAC,SAAS,IAAI,IAAI,SAAS,IAAI,GAAG;gBAAC,SAAS,IAAI;aAAC;QACzE;QAEA,QAAQ,IAAI,CAAC,CAAC,oCAAoC,EAAE,SAAS,MAAM,CAAC,YAAY,CAAC;QACjF,OAAO,EAAE;IAEb,EAAE,OAAO,OAAO;QACZ,IAAI,qIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;YAC3B,QAAQ,KAAK,CAAC,uCAAuC,MAAM,OAAO;QACtE,OAAO;YACH,QAAQ,KAAK,CAAC,wDAAwD;QAC1E;QACA,uEAAuE;QACvE,OAAO,EAAE;IACb;AACJ;;;IAzBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 1096, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateWidgetFromQuery as '403af59851ea14b08b48a241fb7d2ae749341591a1'} from 'ACTIONS_MODULE0'\nexport {agentSpecificWidget as '400d15e0b4424299bcd0f5377bb47cfc276ad48a5f'} from 'ACTIONS_MODULE1'\nexport {saveQueryWithVoiceText as '4064d9c2cdb2f59705e0a52d5f92ee92ca8d708bb8'} from 'ACTIONS_MODULE2'\nexport {generateOverviewSummary as '40c5823eaafb39dbda8f28b48e02c4b3b7e2d17140'} from 'ACTIONS_MODULE3'\nexport {getIncidents as '407b349ba13262084cf53236e25e7f4d80dc7485fb'} from 'ACTIONS_MODULE4'\nexport {getSampleData as '60f50edc5d12f180707cfea8977e737848a9737e18'} from 'ACTIONS_MODULE5'\nexport {getWorkspaces as '400809f3dbc890cd1b65b747a9e4787dc80a6d40b4'} from 'ACTIONS_MODULE6'\nexport {saveWorkspace as '40acb204cd4c38bfec9788563c8b11c2d8c36b9149'} from 'ACTIONS_MODULE6'\nexport {deleteWorkspace as '407b0a035874e368eab9c68298e726056d66bd8cd7'} from 'ACTIONS_MODULE6'\nexport {detectWorkspaceChanges as '60e1d523ec930282172222333dfb25c1d742c5d1a0'} from 'ACTIONS_MODULE6'\nexport {contextAwareWidgetChat as '40896f7852fe2943210ea3525aac2a9ddc94644536'} from 'ACTIONS_MODULE7'\nexport {getAssistants as '40b74fb771eb797167a382eb9b61b856c789d444af'} from 'ACTIONS_MODULE8'\nexport {getPrompts as '008ee5a612ece7ecc966cef85c977efda74a90a51f'} from 'ACTIONS_MODULE9'\n"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA","debugId":null}},
    {"offset": {"line": 1211, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 1225, "column": 0}, "map": {"version":3,"sources":["file:///S:/Development/BabelPhish/code_base/bable_web/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 1239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}